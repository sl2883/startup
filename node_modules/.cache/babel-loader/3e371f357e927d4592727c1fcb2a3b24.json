{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule SwipeableListViewDataSource\n */\n'use strict';\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport ListViewDataSource from '../ListView/ListViewDataSource';\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\n\nvar SwipeableListViewDataSource = /*#__PURE__*/function () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n\n  var _proto = SwipeableListViewDataSource.prototype;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n    return this;\n  } // For the actual ListView to use\n  ;\n\n  _proto.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n\n  _proto.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n\n  _proto.getFirstRowID = function getFirstRowID() {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n\n    return Object.keys(this._dataBlob)[0];\n  };\n\n  _proto.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n\n  _proto.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return this;\n  };\n\n  return SwipeableListViewDataSource;\n}();\n\nvar _default = SwipeableListViewDataSource;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(SwipeableListViewDataSource, \"SwipeableListViewDataSource\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/SwipeableListViewDataSource.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/SwipeableListViewDataSource.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}