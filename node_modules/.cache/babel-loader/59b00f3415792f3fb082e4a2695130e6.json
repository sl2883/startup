{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) 2016-present, Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * WARNING: changes to this file in particular can cause significant changes to\n * the results of render performance benchmarks.\n */\n\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport createReactDOMStyle from './createReactDOMStyle';\nimport flattenArray from '../../modules/flattenArray';\nimport flattenStyle from './flattenStyle';\nimport I18nManager from '../I18nManager';\nimport i18nStyle from './i18nStyle';\nimport { prefixInlineStyles } from '../../modules/prefixStyles';\nimport StyleSheetManager from './StyleSheetManager';\nvar emptyObject = {};\n\nvar ReactNativeStyleResolver = /*#__PURE__*/function () {\n  var _proto = ReactNativeStyleResolver.prototype;\n\n  _proto._init = function _init() {\n    this.cache = {\n      ltr: {},\n      rtl: {},\n      rtlNoSwap: {}\n    };\n    this.injectedCache = {\n      ltr: {},\n      rtl: {},\n      rtlNoSwap: {}\n    };\n    this.styleSheetManager = new StyleSheetManager();\n  };\n\n  function ReactNativeStyleResolver() {\n    this._init();\n  }\n\n  _proto.getStyleSheet = function getStyleSheet() {\n    // reset state on the server so critical css is always the result\n    var sheet = this.styleSheetManager.getStyleSheet();\n\n    if (!canUseDOM) {\n      this._init();\n    }\n\n    return sheet;\n  };\n\n  _proto._injectRegisteredStyle = function _injectRegisteredStyle(id) {\n    var _this = this;\n\n    var doLeftAndRightSwapInRTL = I18nManager.doLeftAndRightSwapInRTL,\n        isRTL = I18nManager.isRTL;\n    var dir = isRTL ? doLeftAndRightSwapInRTL ? 'rtl' : 'rtlNoSwap' : 'ltr';\n\n    if (!this.injectedCache[dir][id]) {\n      var style = flattenStyle(id);\n      var domStyle = createReactDOMStyle(i18nStyle(style));\n      Object.keys(domStyle).forEach(function (styleProp) {\n        var value = domStyle[styleProp];\n\n        if (value != null) {\n          _this.styleSheetManager.injectDeclaration(styleProp, value);\n        }\n      });\n      this.injectedCache[dir][id] = true;\n    }\n  }\n  /**\n   * Resolves a React Native style object to DOM attributes\n   */\n  ;\n\n  _proto.resolve = function resolve(style) {\n    if (!style) {\n      return emptyObject;\n    } // fast and cachable\n\n\n    if (typeof style === 'number') {\n      this._injectRegisteredStyle(style);\n\n      var _key = createCacheKey(style);\n\n      return this._resolveStyleIfNeeded(style, _key);\n    } // resolve a plain RN style object\n\n\n    if (!Array.isArray(style)) {\n      return this._resolveStyleIfNeeded(style);\n    } // flatten the style array\n    // cache resolved props when all styles are registered\n    // otherwise fallback to resolving\n\n\n    var flatArray = flattenArray(style);\n    var isArrayOfNumbers = true;\n    var cacheKey = '';\n\n    for (var i = 0; i < flatArray.length; i++) {\n      var id = flatArray[i];\n\n      if (typeof id !== 'number') {\n        isArrayOfNumbers = false;\n      } else {\n        if (isArrayOfNumbers) {\n          cacheKey += id + '-';\n        }\n\n        this._injectRegisteredStyle(id);\n      }\n    }\n\n    var key = isArrayOfNumbers ? createCacheKey(cacheKey) : null;\n    return this._resolveStyleIfNeeded(flatArray, key);\n  }\n  /**\n   * Resolves a React Native style object to DOM attributes, accounting for\n   * the existing styles applied to the DOM node.\n   *\n   * To determine the next style, some of the existing DOM state must be\n   * converted back into React Native styles.\n   */\n  ;\n\n  _proto.resolveWithNode = function resolveWithNode(rnStyleNext, node) {\n    var _this2 = this;\n\n    var _getDOMStyleInfo = getDOMStyleInfo(node),\n        rdomClassList = _getDOMStyleInfo.classList,\n        rdomStyle = _getDOMStyleInfo.style; // Convert the DOM classList back into a React Native form\n    // Preserves unrecognized class names.\n\n\n    var _rdomClassList$reduce = rdomClassList.reduce(function (styleProps, className) {\n      var _this2$styleSheetMana = _this2.styleSheetManager.getDeclaration(className),\n          prop = _this2$styleSheetMana.prop,\n          value = _this2$styleSheetMana.value;\n\n      if (prop) {\n        styleProps.style[prop] = value;\n      } else {\n        styleProps.classList.push(className);\n      }\n\n      return styleProps;\n    }, {\n      classList: [],\n      style: {}\n    }),\n        rnClassList = _rdomClassList$reduce.classList,\n        rnStyle = _rdomClassList$reduce.style; // Create next DOM style props from current and next RN styles\n\n\n    var _this$resolve = this.resolve([i18nStyle(rnStyle), rnStyleNext]),\n        rdomClassListNext = _this$resolve.classList,\n        rdomStyleNext = _this$resolve.style; // Final className\n    // Add the current class names not managed by React Native\n\n\n    var className = classListToString(rdomClassListNext.concat(rnClassList)); // Final style\n    // Next class names take priority over current inline styles\n\n    var style = _objectSpread({}, rdomStyle);\n\n    rdomClassListNext.forEach(function (className) {\n      var _this2$styleSheetMana2 = _this2.styleSheetManager.getDeclaration(className),\n          prop = _this2$styleSheetMana2.prop;\n\n      if (style[prop]) {\n        style[prop] = '';\n      }\n    }); // Next inline styles take priority over current inline styles\n\n    Object.assign(style, rdomStyleNext);\n    return {\n      className: className,\n      style: style\n    };\n  }\n  /**\n   * Resolves a React Native style object\n   */\n  ;\n\n  _proto._resolveStyle = function _resolveStyle(style) {\n    var _this3 = this;\n\n    var flatStyle = flattenStyle(style);\n    var domStyle = createReactDOMStyle(i18nStyle(flatStyle));\n    var props = Object.keys(domStyle).reduce(function (props, styleProp) {\n      var value = domStyle[styleProp];\n\n      if (value != null) {\n        var className = _this3.styleSheetManager.getClassName(styleProp, value);\n\n        if (className) {\n          props.classList.push(className);\n        } else {\n          // Certain properties and values are not transformed by 'createReactDOMStyle' as they\n          // require more complex transforms into multiple CSS rules. Here we assume that StyleManager\n          // can bind these styles to a className, and prevent them becoming invalid inline-styles.\n          if (styleProp === 'pointerEvents' || styleProp === 'placeholderTextColor' || styleProp === 'animationName') {\n            var _className = _this3.styleSheetManager.injectDeclaration(styleProp, value);\n\n            if (_className) {\n              props.classList.push(_className);\n            }\n          } else {\n            if (!props.style) {\n              props.style = {};\n            } // 4x slower render\n\n\n            props.style[styleProp] = value;\n          }\n        }\n      }\n\n      return props;\n    }, {\n      classList: []\n    });\n    props.className = classListToString(props.classList);\n\n    if (props.style) {\n      props.style = prefixInlineStyles(props.style);\n    }\n\n    return props;\n  }\n  /**\n   * Caching layer over 'resolveStyle'\n   */\n  ;\n\n  _proto._resolveStyleIfNeeded = function _resolveStyleIfNeeded(style, key) {\n    if (key) {\n      var doLeftAndRightSwapInRTL = I18nManager.doLeftAndRightSwapInRTL,\n          isRTL = I18nManager.isRTL;\n      var dir = isRTL ? doLeftAndRightSwapInRTL ? 'rtl' : 'rtlNoSwap' : 'ltr';\n\n      if (!this.cache[dir][key]) {\n        // slow: convert style object to props and cache\n        this.cache[dir][key] = this._resolveStyle(style);\n      }\n\n      return this.cache[dir][key];\n    }\n\n    return this._resolveStyle(style);\n  };\n\n  return ReactNativeStyleResolver;\n}();\n/**\n * Misc helpers\n */\n\n\nexport { ReactNativeStyleResolver as default };\n\nvar createCacheKey = function createCacheKey(id) {\n  var prefix = 'rn';\n  return prefix + \"-\" + id;\n};\n\nvar classListToString = function classListToString(list) {\n  return list.join(' ').trim();\n};\n/**\n * Copies classList and style data from a DOM node\n */\n\n\nvar hyphenPattern = /-([a-z])/g;\n\nvar toCamelCase = function toCamelCase(str) {\n  return str.replace(hyphenPattern, function (m) {\n    return m[1].toUpperCase();\n  });\n};\n\nvar getDOMStyleInfo = function getDOMStyleInfo(node) {\n  var nodeStyle = node.style;\n  var classList = Array.prototype.slice.call(node.classList);\n  var style = {}; // DOM style is a CSSStyleDeclaration\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n\n  for (var i = 0; i < nodeStyle.length; i += 1) {\n    var property = nodeStyle.item(i);\n\n    if (property) {\n      // DOM style uses hyphenated prop names and may include vendor prefixes\n      // Transform back into React DOM style.\n      style[toCamelCase(property)] = nodeStyle.getPropertyValue(property);\n    }\n  }\n\n  return {\n    classList: classList,\n    style: style\n  };\n};\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(emptyObject, \"emptyObject\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(ReactNativeStyleResolver, \"ReactNativeStyleResolver\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(createCacheKey, \"createCacheKey\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(classListToString, \"classListToString\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(hyphenPattern, \"hyphenPattern\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(toCamelCase, \"toCamelCase\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n  reactHotLoader.register(getDOMStyleInfo, \"getDOMStyleInfo\", \"/home/ec2-user/myApp/node_modules/react-native-web/dist/exports/StyleSheet/ReactNativeStyleResolver.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}